import {MigrationInterface, QueryRunner} from "typeorm";

export class migrations1699593919389 implements MigrationInterface {
    name = 'migrations1699593919389'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "upcomingTwitter" ("id" SERIAL NOT NULL, "followerCount" integer NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "upcomingContractId" integer, CONSTRAINT "PK_9768fe879e32a5e0517d6c4a569" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "upcomingDiscord" ("id" SERIAL NOT NULL, "joinCount" integer NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "upcomingContractId" integer, CONSTRAINT "PK_6eb27edd27069e9199d0a66df02" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "upcomingContract" ("id" SERIAL NOT NULL, "publishDate" TIMESTAMP, "name" character varying, "category" character varying, "totalSupply" bigint, "bannerImageUrl" character varying, "profileImageUrl" character varying, "description" text, "externalUrl" character varying, "twitterUsername" character varying, "discordUrl" character varying, "premintUrl" character varying, "preSalePrice" double precision, "publicSalePrice" double precision, "priceUnit" character varying, "tokenType" character varying DEFAULT 'ERC721', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_9478f1b93c0c5b1f3b4358f49c1" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "trendUpcomingCollection_timerange_enum" AS ENUM('1D', '3D', '7D', '14D')`);
        await queryRunner.query(`CREATE TABLE "trendUpcomingCollection" ("id" SERIAL NOT NULL, "timeRange" "trendUpcomingCollection_timerange_enum" NOT NULL, "twitterFollowerCount" integer, "twitterBeforeFollowerCount" integer, "twitterDeviation" double precision, "twitterDeviationPercent" double precision, "discordJoinCount" integer, "discordBeforeJoinCount" integer, "discordDeviation" double precision, "discordDeviationPercent" double precision, "staticCreateAt" TIMESTAMP NOT NULL DEFAULT now(), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "upcomingContractId" integer, CONSTRAINT "PK_34fdab3ba94019a230d0c3829f8" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "topic" ("id" SERIAL NOT NULL, "index" integer NOT NULL, "topic" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "logId" integer, CONSTRAINT "PK_33aa4ecb4e4f20aa0157ea7ef61" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_topic_log" ON "topic" ("logId") `);
        await queryRunner.query(`CREATE INDEX "idx_topic_log_topic_index" ON "topic" ("logId", "topic", "index") `);
        await queryRunner.query(`CREATE TABLE "blockNumber" ("id" SERIAL NOT NULL, "blockNumber" integer NOT NULL, "isNFTCompletedUpdate" boolean NOT NULL DEFAULT false, "isCompletedUpdate" boolean NOT NULL DEFAULT false, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_d107ec7efea836f5b7537aefcd1" UNIQUE ("blockNumber"), CONSTRAINT "PK_6bbbc632faba12b9eef27ed63e2" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "decodedLog" ("id" SERIAL NOT NULL, "action" character varying, "contractAddress" character varying, "tokenId" character varying, "from" character varying, "to" character varying, "ethValue" double precision, "unit" character varying, "value" double precision, "platform" character varying, "quantity" integer, "minterAddress" character varying, "stage" character varying, "mintCount" integer, "timestamp" integer, "eventTime" TIMESTAMP, "gasUsed" character varying, "cumulativeGasUsed" character varying, "effectiveGasPrice" character varying, "gasPrice" character varying, "gasLimit" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "logId" integer, "transactionId" integer, "contractId" integer, "nftId" integer, CONSTRAINT "REL_eb122e51715ca224f918dc2b47" UNIQUE ("logId"), CONSTRAINT "PK_66659163606cf70161391d10d9f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_decodedlog_log" ON "decodedLog" ("logId") `);
        await queryRunner.query(`CREATE INDEX "idx_decodedlog_transaction" ON "decodedLog" ("transactionId") `);
        await queryRunner.query(`CREATE INDEX "idx_decodedlog_contractaddress_timestamp" ON "decodedLog" ("contractAddress", "timestamp") `);
        await queryRunner.query(`CREATE TABLE "transaction" ("id" SERIAL NOT NULL, "hash" character varying, "timestamp" integer, "eventTime" TIMESTAMP, "blockHash" character varying, "transactionIndex" integer, "to" character varying, "from" character varying, "gasUsed" character varying, "cumulativeGasUsed" character varying, "effectiveGasPrice" character varying, "gasPrice" character varying, "gasLimit" character varying, "value" character varying, "nonce" integer, "data" text, "chainId" integer, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "contractId" integer, "blockNumberId" integer, CONSTRAINT "PK_89eadb93a89810556e1cbcd6ab9" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_transaction_contract" ON "transaction" ("contractId") `);
        await queryRunner.query(`CREATE INDEX "idx_transaction_hash" ON "transaction" ("hash") `);
        await queryRunner.query(`CREATE INDEX "idx_transaction_timestamp" ON "transaction" ("timestamp") `);
        await queryRunner.query(`CREATE INDEX "idx_transaction_eventTime" ON "transaction" ("eventTime") `);
        await queryRunner.query(`CREATE INDEX "idx_transaction_blockNumber" ON "transaction" ("blockNumberId") `);
        await queryRunner.query(`CREATE TABLE "log" ("id" SERIAL NOT NULL, "transactionIndex" integer, "blockNumber" integer, "transactionHash" character varying, "address" character varying, "data" text, "logIndex" integer, "blockHash" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "decodedLogId" integer, "transactionId" integer, "contractId" integer, "nftId" integer, CONSTRAINT "REL_dfcbf4069ec1d3ab1be0b38102" UNIQUE ("decodedLogId"), CONSTRAINT "PK_350604cbdf991d5930d9e618fbd" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_log_nft" ON "log" ("nftId") `);
        await queryRunner.query(`CREATE INDEX "idx_log_contract" ON "log" ("contractId") `);
        await queryRunner.query(`CREATE INDEX "idx_log_decodedLog" ON "log" ("decodedLogId") `);
        await queryRunner.query(`CREATE INDEX "idx_log_transaction_contract" ON "log" ("transactionId", "contractId") `);
        await queryRunner.query(`CREATE TABLE "attributeNFT" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "attributeId" integer, "nftId" integer, CONSTRAINT "PK_66861d966cfe6b29b0506bca421" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_attributeNFT_attribute" ON "attributeNFT" ("attributeId") `);
        await queryRunner.query(`CREATE INDEX "idx_attributeNFT_nft" ON "attributeNFT" ("nftId") `);
        await queryRunner.query(`CREATE TABLE "nft" ("id" SERIAL NOT NULL, "tokenId" character varying, "tokenType" character varying, "title" character varying(1000), "description" text, "attributesRaw" text, "imageRaw" text, "isAttributeUpdated" boolean, "imageRoute" character varying(1000), "isImageUploaded" boolean, "imageSaveError" text, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "contractId" integer, CONSTRAINT "uniqueIndex" UNIQUE ("contractId", "tokenId"), CONSTRAINT "PK_8f46897c58e23b0e7bf6c8e56b0" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_nft_contract" ON "nft" ("contractId") `);
        await queryRunner.query(`CREATE TYPE "trendCollection_timerange_enum" AS ENUM('1H', '6H', '12H', '24H', '7D')`);
        await queryRunner.query(`CREATE TABLE "trendCollection" ("id" SERIAL NOT NULL, "floorPrice" double precision, "timeRange" "trendCollection_timerange_enum" NOT NULL, "sales" integer, "salesDeviation" double precision, "salesDeviationPercent" double precision, "volume" double precision, "volumeDeviation" double precision, "volumeDeviationPercent" double precision, "averageValue" double precision, "priceDeviation" double precision, "priceDeviationPercent" double precision, "staticCreateAt" TIMESTAMP NOT NULL DEFAULT now(), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "contractId" integer, CONSTRAINT "PK_d2ee61d2620aa1addac85179168" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_trend_time_static" ON "trendCollection" ("timeRange", "staticCreateAt") `);
        await queryRunner.query(`CREATE TABLE "openseaCollection" ("id" SERIAL NOT NULL, "totalSupply" integer, "count" integer, "bannerImageUrl" character varying(4000), "createdDate" TIMESTAMP, "description" text, "floorPrice" integer, "discordUrl" character varying, "externalUrl" character varying, "imageUrl" character varying(4000), "largeImageUrl" character varying, "mediumUsername" character varying, "name" character varying, "shortDescription" character varying, "slug" character varying, "telegramUrl" character varying, "twitterUsername" character varying, "instagramUsername" character varying, "wikiUrl" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "contractId" integer, CONSTRAINT "REL_0d4d7bde35689019f1b5b337f7" UNIQUE ("contractId"), CONSTRAINT "PK_542b618a383d271ce1e337a075f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "contract" ("id" SERIAL NOT NULL, "address" character varying, "name" character varying, "totalSupply" character varying, "imageUrl" character varying, "description" text, "externalUrl" character varying, "twitterUsername" character varying, "discordUrl" character varying, "symbol" character varying, "tokenType" character varying, "contractDeployer" character varying, "deployedBlockNumber" integer, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "openseaCollectionId" integer, CONSTRAINT "UQ_4bbe5fb40812718baf74cc9a79e" UNIQUE ("address"), CONSTRAINT "REL_5b9ac2d9028faac901f4b351d4" UNIQUE ("openseaCollectionId"), CONSTRAINT "PK_17c3a89f58a2997276084e706e8" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_contract_openseaCollection" ON "contract" ("openseaCollectionId") `);
        await queryRunner.query(`CREATE TABLE "traitTypeContract" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "traitTypeId" integer, "contractId" integer, CONSTRAINT "PK_c7b3b3f308764d111ebef71253d" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "idx_traitType_contract" ON "traitTypeContract" ("contractId") `);
        await queryRunner.query(`CREATE INDEX "idx_traitTypeContract_traitType" ON "traitTypeContract" ("traitTypeId") `);
        await queryRunner.query(`CREATE TABLE "traitType" ("id" SERIAL NOT NULL, "traitType" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_c19983dce9ba1a2f8d4767f1ad4" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "attribute" ("id" SERIAL NOT NULL, "value" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "traitTypeId" integer, CONSTRAINT "PK_b13fb7c5c9e9dff62b60e0de729" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "contractError" ("id" SERIAL NOT NULL, "blockNumber" integer NOT NULL, "transactionHash" character varying NOT NULL, "address" character varying NOT NULL, "returnStringData" text, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_fbaee01184d47ea6ed736fb78ed" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "decodeError" ("id" SERIAL NOT NULL, "blockNumber" integer, "signature" character varying, "data" character varying, "log" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_c533521ab03ca98b8eeffb5175b" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "kakaoAccessToken" ("id" SERIAL NOT NULL, "accessToken" character varying, "expiresIn" integer, "scope" character varying, "refreshTokenExpiresIn" integer, "refreshToken" character varying, "tokenType" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_bdf04e7c71c6f0e4da324d768a6" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "logError" ("id" SERIAL NOT NULL, "blockNumber" integer NOT NULL, "transactionHash" character varying, "logId" integer, "isCompletedCreate" boolean DEFAULT false, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_d846cbb696a0a315ed48511e15b" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "openseaNFT" ("id" SERIAL NOT NULL, "tokenId" character varying, "numSales" integer, "backgroundColor" character varying, "imageUrl" character varying, "imagePreviewUrl" character varying, "imageThumbnailUrl" character varying, "imageOriginalUrl" character varying, "animationUrl" character varying, "animationOriginalUrl" character varying, "name" character varying, "externalLink" character varying, "permalink" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_b66545483112c4d539b76c6ac72" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "signature" ("id" SERIAL NOT NULL, "signatureId" integer NOT NULL, "textSignature" text NOT NULL, "hexSignature" character varying NOT NULL, "bytesSignature" character varying NOT NULL, "createdDate" TIMESTAMP NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_8e62734171afc1d7c9570be27fb" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "trendCollections_timerange_enum" AS ENUM('1H', '6H', '12H', '24H')`);
        await queryRunner.query(`CREATE TABLE "trendCollections" ("id" SERIAL NOT NULL, "floorPrice" double precision, "volume" double precision, "timeRange" "trendCollections_timerange_enum" NOT NULL, "sales" integer, "staticCreateAt" TIMESTAMP NOT NULL DEFAULT now(), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "contractId" integer, CONSTRAINT "PK_4499e83aa0f7780d0b0736f397f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "walletContractConnection" ("id" SERIAL NOT NULL, "walletId" integer NOT NULL, "contractId" integer NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_f39c453492fe84fb37fe14c23ff" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "wallet" ("id" SERIAL NOT NULL, "username" character varying, "profileImgUrl" character varying, "address" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_bec464dd8d54c39c54fd32e2334" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "upcomingTwitter" ADD CONSTRAINT "FK_4e219f94e1a7480b1a070375d38" FOREIGN KEY ("upcomingContractId") REFERENCES "upcomingContract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "upcomingDiscord" ADD CONSTRAINT "FK_570b09c73cc289fbf942d8057dc" FOREIGN KEY ("upcomingContractId") REFERENCES "upcomingContract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "trendUpcomingCollection" ADD CONSTRAINT "FK_50fda455816d9179571241b14f4" FOREIGN KEY ("upcomingContractId") REFERENCES "upcomingContract"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "topic" ADD CONSTRAINT "FK_49aff552997dc521ef83fad26e7" FOREIGN KEY ("logId") REFERENCES "log"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "decodedLog" ADD CONSTRAINT "FK_eb122e51715ca224f918dc2b47b" FOREIGN KEY ("logId") REFERENCES "log"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "decodedLog" ADD CONSTRAINT "FK_544629cf6957ffb7ebf387aae64" FOREIGN KEY ("transactionId") REFERENCES "transaction"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "decodedLog" ADD CONSTRAINT "FK_c05c68da29114e359592d6e34cf" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "decodedLog" ADD CONSTRAINT "FK_d88eb3cbdbb03a4bc4df900baa3" FOREIGN KEY ("nftId") REFERENCES "nft"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transaction" ADD CONSTRAINT "FK_d246554c12d32ef78934bdc6abd" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transaction" ADD CONSTRAINT "FK_6d84d55e87b5faffbc3a33c7da8" FOREIGN KEY ("blockNumberId") REFERENCES "blockNumber"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "log" ADD CONSTRAINT "FK_dfcbf4069ec1d3ab1be0b381021" FOREIGN KEY ("decodedLogId") REFERENCES "decodedLog"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "log" ADD CONSTRAINT "FK_9ac6c31c55c4b31650794599e6b" FOREIGN KEY ("transactionId") REFERENCES "transaction"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "log" ADD CONSTRAINT "FK_ffd3070a6e46a72ebff6aab8cab" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "log" ADD CONSTRAINT "FK_f2ec0b32afa01a9484ed61f15d6" FOREIGN KEY ("nftId") REFERENCES "nft"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "attributeNFT" ADD CONSTRAINT "FK_4c185918174b32df7ae6e15bcd5" FOREIGN KEY ("attributeId") REFERENCES "attribute"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "attributeNFT" ADD CONSTRAINT "FK_25d2cd0fa65f6d692b88cc26875" FOREIGN KEY ("nftId") REFERENCES "nft"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "nft" ADD CONSTRAINT "FK_56837dbd73abdd996108e955162" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "trendCollection" ADD CONSTRAINT "FK_bd942ed678e70a1b00ede2e3f7f" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "openseaCollection" ADD CONSTRAINT "FK_0d4d7bde35689019f1b5b337f7f" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "contract" ADD CONSTRAINT "FK_5b9ac2d9028faac901f4b351d47" FOREIGN KEY ("openseaCollectionId") REFERENCES "openseaCollection"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "traitTypeContract" ADD CONSTRAINT "FK_0004d7ddbd746932d4e086fd299" FOREIGN KEY ("traitTypeId") REFERENCES "traitType"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "traitTypeContract" ADD CONSTRAINT "FK_26f2dc88214bdbfc59b18edd5b1" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "attribute" ADD CONSTRAINT "FK_efb565363ee98ee2eb280570688" FOREIGN KEY ("traitTypeId") REFERENCES "traitType"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "trendCollections" ADD CONSTRAINT "FK_0cdcb00e7c8521f583e5478bbd9" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "walletContractConnection" ADD CONSTRAINT "FK_408ef862b737458ae1bd70941a6" FOREIGN KEY ("walletId") REFERENCES "wallet"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "walletContractConnection" ADD CONSTRAINT "FK_1cef076ec77e55757f034624ba3" FOREIGN KEY ("contractId") REFERENCES "contract"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "walletContractConnection" DROP CONSTRAINT "FK_1cef076ec77e55757f034624ba3"`);
        await queryRunner.query(`ALTER TABLE "walletContractConnection" DROP CONSTRAINT "FK_408ef862b737458ae1bd70941a6"`);
        await queryRunner.query(`ALTER TABLE "trendCollections" DROP CONSTRAINT "FK_0cdcb00e7c8521f583e5478bbd9"`);
        await queryRunner.query(`ALTER TABLE "attribute" DROP CONSTRAINT "FK_efb565363ee98ee2eb280570688"`);
        await queryRunner.query(`ALTER TABLE "traitTypeContract" DROP CONSTRAINT "FK_26f2dc88214bdbfc59b18edd5b1"`);
        await queryRunner.query(`ALTER TABLE "traitTypeContract" DROP CONSTRAINT "FK_0004d7ddbd746932d4e086fd299"`);
        await queryRunner.query(`ALTER TABLE "contract" DROP CONSTRAINT "FK_5b9ac2d9028faac901f4b351d47"`);
        await queryRunner.query(`ALTER TABLE "openseaCollection" DROP CONSTRAINT "FK_0d4d7bde35689019f1b5b337f7f"`);
        await queryRunner.query(`ALTER TABLE "trendCollection" DROP CONSTRAINT "FK_bd942ed678e70a1b00ede2e3f7f"`);
        await queryRunner.query(`ALTER TABLE "nft" DROP CONSTRAINT "FK_56837dbd73abdd996108e955162"`);
        await queryRunner.query(`ALTER TABLE "attributeNFT" DROP CONSTRAINT "FK_25d2cd0fa65f6d692b88cc26875"`);
        await queryRunner.query(`ALTER TABLE "attributeNFT" DROP CONSTRAINT "FK_4c185918174b32df7ae6e15bcd5"`);
        await queryRunner.query(`ALTER TABLE "log" DROP CONSTRAINT "FK_f2ec0b32afa01a9484ed61f15d6"`);
        await queryRunner.query(`ALTER TABLE "log" DROP CONSTRAINT "FK_ffd3070a6e46a72ebff6aab8cab"`);
        await queryRunner.query(`ALTER TABLE "log" DROP CONSTRAINT "FK_9ac6c31c55c4b31650794599e6b"`);
        await queryRunner.query(`ALTER TABLE "log" DROP CONSTRAINT "FK_dfcbf4069ec1d3ab1be0b381021"`);
        await queryRunner.query(`ALTER TABLE "transaction" DROP CONSTRAINT "FK_6d84d55e87b5faffbc3a33c7da8"`);
        await queryRunner.query(`ALTER TABLE "transaction" DROP CONSTRAINT "FK_d246554c12d32ef78934bdc6abd"`);
        await queryRunner.query(`ALTER TABLE "decodedLog" DROP CONSTRAINT "FK_d88eb3cbdbb03a4bc4df900baa3"`);
        await queryRunner.query(`ALTER TABLE "decodedLog" DROP CONSTRAINT "FK_c05c68da29114e359592d6e34cf"`);
        await queryRunner.query(`ALTER TABLE "decodedLog" DROP CONSTRAINT "FK_544629cf6957ffb7ebf387aae64"`);
        await queryRunner.query(`ALTER TABLE "decodedLog" DROP CONSTRAINT "FK_eb122e51715ca224f918dc2b47b"`);
        await queryRunner.query(`ALTER TABLE "topic" DROP CONSTRAINT "FK_49aff552997dc521ef83fad26e7"`);
        await queryRunner.query(`ALTER TABLE "trendUpcomingCollection" DROP CONSTRAINT "FK_50fda455816d9179571241b14f4"`);
        await queryRunner.query(`ALTER TABLE "upcomingDiscord" DROP CONSTRAINT "FK_570b09c73cc289fbf942d8057dc"`);
        await queryRunner.query(`ALTER TABLE "upcomingTwitter" DROP CONSTRAINT "FK_4e219f94e1a7480b1a070375d38"`);
        await queryRunner.query(`DROP TABLE "wallet"`);
        await queryRunner.query(`DROP TABLE "walletContractConnection"`);
        await queryRunner.query(`DROP TABLE "trendCollections"`);
        await queryRunner.query(`DROP TYPE "trendCollections_timerange_enum"`);
        await queryRunner.query(`DROP TABLE "signature"`);
        await queryRunner.query(`DROP TABLE "openseaNFT"`);
        await queryRunner.query(`DROP TABLE "logError"`);
        await queryRunner.query(`DROP TABLE "kakaoAccessToken"`);
        await queryRunner.query(`DROP TABLE "decodeError"`);
        await queryRunner.query(`DROP TABLE "contractError"`);
        await queryRunner.query(`DROP TABLE "attribute"`);
        await queryRunner.query(`DROP TABLE "traitType"`);
        await queryRunner.query(`DROP INDEX "idx_traitTypeContract_traitType"`);
        await queryRunner.query(`DROP INDEX "idx_traitType_contract"`);
        await queryRunner.query(`DROP TABLE "traitTypeContract"`);
        await queryRunner.query(`DROP INDEX "idx_contract_openseaCollection"`);
        await queryRunner.query(`DROP TABLE "contract"`);
        await queryRunner.query(`DROP TABLE "openseaCollection"`);
        await queryRunner.query(`DROP INDEX "idx_trend_time_static"`);
        await queryRunner.query(`DROP TABLE "trendCollection"`);
        await queryRunner.query(`DROP TYPE "trendCollection_timerange_enum"`);
        await queryRunner.query(`DROP INDEX "idx_nft_contract"`);
        await queryRunner.query(`DROP TABLE "nft"`);
        await queryRunner.query(`DROP INDEX "idx_attributeNFT_nft"`);
        await queryRunner.query(`DROP INDEX "idx_attributeNFT_attribute"`);
        await queryRunner.query(`DROP TABLE "attributeNFT"`);
        await queryRunner.query(`DROP INDEX "idx_log_transaction_contract"`);
        await queryRunner.query(`DROP INDEX "idx_log_decodedLog"`);
        await queryRunner.query(`DROP INDEX "idx_log_contract"`);
        await queryRunner.query(`DROP INDEX "idx_log_nft"`);
        await queryRunner.query(`DROP TABLE "log"`);
        await queryRunner.query(`DROP INDEX "idx_transaction_blockNumber"`);
        await queryRunner.query(`DROP INDEX "idx_transaction_eventTime"`);
        await queryRunner.query(`DROP INDEX "idx_transaction_timestamp"`);
        await queryRunner.query(`DROP INDEX "idx_transaction_hash"`);
        await queryRunner.query(`DROP INDEX "idx_transaction_contract"`);
        await queryRunner.query(`DROP TABLE "transaction"`);
        await queryRunner.query(`DROP INDEX "idx_decodedlog_contractaddress_timestamp"`);
        await queryRunner.query(`DROP INDEX "idx_decodedlog_transaction"`);
        await queryRunner.query(`DROP INDEX "idx_decodedlog_log"`);
        await queryRunner.query(`DROP TABLE "decodedLog"`);
        await queryRunner.query(`DROP TABLE "blockNumber"`);
        await queryRunner.query(`DROP INDEX "idx_topic_log_topic_index"`);
        await queryRunner.query(`DROP INDEX "idx_topic_log"`);
        await queryRunner.query(`DROP TABLE "topic"`);
        await queryRunner.query(`DROP TABLE "trendUpcomingCollection"`);
        await queryRunner.query(`DROP TYPE "trendUpcomingCollection_timerange_enum"`);
        await queryRunner.query(`DROP TABLE "upcomingContract"`);
        await queryRunner.query(`DROP TABLE "upcomingDiscord"`);
        await queryRunner.query(`DROP TABLE "upcomingTwitter"`);
    }

}
